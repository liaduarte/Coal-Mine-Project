# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoalMineDialog
                                 A QGIS plugin
 This plugin presents the database of Coal Mine Project.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-01-17
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Duarte et al
        email                : liaduarte@fc.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *
from qgis.gui import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from .terrain import Ui_Terrain
from .kmeans import Ui_kmeans
from .interpolation import Ui_interpolation

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'coal_mine_dialog_base.ui'))


class CoalMineDialog(QtWidgets.QMainWindow, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CoalMineDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        self.layers = []
        self.widget.setCanvasColor(QColor(255, 255, 255))
        self.widget.setCanvasColor(Qt.white)
        self.widget.enableAntiAliasing(True)
        self.setCentralWidget(self.widget)
        self.initialize_map()

        self.actionZoomIn = QAction("Zoom in", self)
        self.actionZoomOut = QAction("Zoom out", self)
        self.actionPan = QAction("Pan", self)

        self.actionZoomIn.setCheckable(True)
        self.actionZoomOut.setCheckable(True)
        self.actionPan.setCheckable(True)

        self.actionZoomIn.triggered.connect(self.zoomIn)
        self.actionZoomOut.triggered.connect(self.zoomOut)
        self.actionPan.triggered.connect(self.pan)

        self.toolbar = self.addToolBar("Canvas actions")
        self.toolbar.addAction(self.actionZoomIn)
        self.toolbar.addAction(self.actionZoomOut)
        self.toolbar.addAction(self.actionPan)

        self.toolPan = QgsMapToolPan(self.widget)
        self.toolPan.setAction(self.actionPan)
        self.toolZoomIn = QgsMapToolZoom(self.widget, False)  # false = in
        self.toolZoomIn.setAction(self.actionZoomIn)
        self.toolZoomOut = QgsMapToolZoom(self.widget, True)  # true = out
        self.toolZoomOut.setAction(self.actionZoomOut)

        self.pan()

        self.root = QgsProject.instance().layerTreeRoot()
        self.bridge = QgsLayerTreeMapCanvasBridge(self.root, self.widget)
        self.model = QgsLayerTreeModel(self.root)
        self.model.setFlag(QgsLayerTreeModel.AllowNodeReorder)
        self.model.setFlag(QgsLayerTreeModel.AllowNodeRename)
        self.model.setFlag(QgsLayerTreeModel.AllowNodeChangeVisibility)
        self.model.testFlag(QgsLayerTreeModel.ShowLegend)
        self.model.setFlag(QgsLayerTreeModel.ShowLegendAsTree)
        self.view = QgsLayerTreeView()
        self.view.setModel(self.model)

        self.createLegendWidget()  # Create the legend widget
        provider = MyMenuProvider(self.view, self.widget)
        self.view.setMenuProvider(provider)

        self.window2 = None
        self.window3 = None
        self.window4 = None

    def initialize_map(self):
        # display file in canvas
        fileCI = 'C:\Artigos\GISTAM_2020\GISTAM\Shapefiles/Base_dados_solos.shp'
        file_info_norm = QFileInfo(str(fileCI))

        # vector layer
        vlayer = QgsVectorLayer(fileCI, "my_layer", "ogr")
        self.layers.append(vlayer)

        if vlayer.isValid():
            self.widget.setLayers(self.layers)
            self.widget.waitWhileRendering()
            self.widget.setExtent(vlayer.extent())
            self.widget.refresh()
        else:
            print("Layer not valid")

    def zoomIn(self):
        self.widget.setMapTool(self.toolZoomIn)

    def zoomOut(self):
        self.widget.setMapTool(self.toolZoomOut)

    def pan(self):
        self.widget.setMapTool(self.toolPan)

    # create layers painel
    def createLegendWidget(self):
        """ Create the map legend widget and associate to the canvas """
        self.LegendDock = QDockWidget("Layers", self)
        self.LegendDock.setObjectName("legend")
        self.LegendDock.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)
        self.LegendDock.setWidget(self.view)
        self.LegendDock.setContentsMargins(9, 9, 9, 9)
        self.addDockWidget(Qt.LeftDockWidgetArea, self.LegendDock)

class MyMenuProvider(QgsLayerTreeViewMenuProvider):
    def __init__(self, view, canvas):
        QgsLayerTreeViewMenuProvider.__init__(self)
        self.view = view
        self.canvas = canvas

    def createContextMenu(self):
        if not self.view.currentLayer():
            return None
        m = QMenu()
        m.addAction("Show Extent", self.showExtent)
        m.addAction("Remove Layer", self.removeLegendLayer)
        m.addAction("Zoom to Layer", self.zoomToLegendLayer)
        m.addAction("Attribute Table", self.attb_table)
        return m

    def attb_table(self):
        from PyQt4.QtGui import QApplication, QTableView
        from qgis.gui import QgsAttributeTableModel
        QMessageBox.about(self.view, 'teste', str(self.view.currentLayer()))
        cache = QgsVectorLayerCache(self.view.currentLayer(), 10000)
        model = QgsAttributeTableModel(cache)
        model.loadLayer()
        table = QTableView()
        table.setModel(model)
        table.show()

    def showExtent(self):
        r = self.view.currentLayer().extent()
        QMessageBox.information(None, "Extent", r.toString())

    def removeLegendLayer(self):
        """ Remove a layer item in the legend """
        QgsProject.instance().removeMapLayer(self.view.currentLayer().id())

    def zoomToLegendLayer(self):
        """ Zoom the map to a layer extent """

        for i in self.view.selectedLayers():
            extent = self.view.currentLayer().extent()
            extent.scale(1.05)
            self.canvas.setExtent(extent)
            self.canvas.refresh()
            break
